<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResultNeutral;
use Drupal\Core\Access\AccessResultForbidden;
use Drupal\Core\Access\AccessResultAllowed;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\node\NodeInterface;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\connecdom_tweaks\Controller\ConnecdomTweaksController;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
use Drupal\user\UserInterface;
use Drupal\user\Entity\User;
use Drupal\connecdom_tweaks\SendMail;
use Drupal\views\Views;

/**
 * Implements hook_theme().
 */
function connecdom_tweaks_theme($existing, $type, $theme, $path) {
  return [
    'connecdom__block__profile_options' => [
      'template' => 'block--profile-options',
    ],
    'connecdom__ds_field__node_report_signature' => [
      'template' => 'ds-field--node-report-signature',
      'variables' => [
        'data' => NULL,
      ]
    ],
    'connecdom__ds_field__node_report_header' => [
      'template' => 'ds-field--node-report-header',
      'variables' => [
        'data' => NULL,
      ]
    ],

    // Email notifications for Study.
    'connecdom__study_notification__created' => [
      'template' => 'study-notification--created',
      'variables' => [
        'data' => NULL,
      ],
    ],
    'connecdom__study_notification__assigned' => [
      'template' => 'study-notification--assigned',
      'variables' => [
        'data' => NULL,
      ],
    ],
    'connecdom__study_notification__unassigned' => [
      'template' => 'study-notification--unassigned',
      'variables' => [
        'data' => NULL,
      ],
    ],
    'connecdom__study_notification__in_progress' => [
      'template' => 'study-notification--in-progress',
      'variables' => [
        'data' => NULL,
      ],
    ],
    'connecdom__study_notification__done' => [
      'template' => 'study-notification--done',
      'variables' => [
        'data' => NULL,
      ],
    ],
  ];
}

/**
 * Implements _mailenu_local_tasks_alter().
 */
function connecdom_tweaks_menu_local_tasks_alter(&$data, $route_name) {
  $userCurrent = \Drupal::currentUser();
  $userRoute = \Drupal::routeMatch()->getParameter('user');
  if ($userRoute && is_numeric($userRoute)) {
    $userRoute = User::load($userRoute);
  }

  // Remove "Manage team" tab if user is not a Clinic.
  if ($userRoute && (!in_array('clinic', $userRoute->getRoles()) || $userRoute->id() != $userCurrent->id())) {
    if (isset($data['tabs']) && isset($data['tabs'][0]) && isset($data['tabs'][0]['views_view:view.clinic_staff.page_staff'])) {
      unset($data['tabs'][0]['views_view:view.clinic_staff.page_staff']);
    }
  }
}

/**
 * Implements hook_node_access().
 */
function connecdom_tweaks_node_access(NodeInterface $node, $op, AccountInterface $account) {
  $access = new AccessResultNeutral();

  if ($node->bundle() == 'report') {
    // Forbid by default.
    $access = new AccessResultForbidden();

    switch ($op) {
      case 'view':
        if (ConnecdomTweaksController::reportHasEditPermission($node, $account)) {
          $access = new AccessResultAllowed();
        }
        break;

      case 'update':
        if (!$node->isPublished() && ConnecdomTweaksController::reportHasEditPermission($node, $account)) {
          $access = new AccessResultAllowed();
        }
        break;
    }
  }

  $access->addCacheableDependency($node);

  return $access;
}

/**
 * Implements hook_views_query_alter().
 */
function connecdom_tweaks_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'worklist' && $view->current_display == 'main') {
    $user = \Drupal::currentUser();

    if (!in_array('administrator', $user->getRoles())) {
      // Displays only Studies assigned to the Doctor.
      if (in_array('doctor', $user->getRoles())) {
        $configuration = array(
          'type' => 'LEFT',
          'table' => 'study__field_study_assignee',
          'field' => 'entity_id',
          'left_table' => 'study',
          'left_field' => 'resource_id',
          'operator' => '=',
        );

        $join = Views::pluginManager('join')
          ->createInstance('standard', $configuration);
        $rel = $query->addRelationship('study_assignee', $join, 'node_field_data');
        $query->addTable('study__field_study_assignee', $rel, $join, 'study_assignee');
        $query->addWhere('AND', 'study_assignee.field_study_assignee_target_id', $user->id(), '=');
      }

      // Displays only Studies assigned to the Clinic.
      if (in_array('clinic', $user->getRoles())) {
        $configuration = array(
          'type' => 'LEFT',
          'table' => 'study__field_study_clinic',
          'field' => 'entity_id',
          'left_table' => 'study',
          'left_field' => 'resource_id',
          'operator' => '=',
        );

        $join = Views::pluginManager('join')
          ->createInstance('standard', $configuration);
        $rel = $query->addRelationship('study_clinic', $join, 'node_field_data');
        $query->addTable('study__field_study_clinic', $rel, $join, 'study_clinic');
        $query->addWhere('AND', 'study_clinic.field_study_clinic_target_id', $user->id(), '=');
      }
    }
  }

  // Hide Doctors already added to Staff.
  if ($view->id() == 'clinic_staff' && $view->current_display == 'page_add_staff') {
    $uid = \Drupal::routeMatch()->getRawParameter('user');
    $account = User::load($uid);
    $clinic_staff = $account->get('field_clinic_staff')->getValue();

    $staff = [];
    foreach ($clinic_staff as $key => $user) {
      $staff[] = $user['target_id'];
    }

    if (!empty($staff)) {
      $query->addWhere('AND', 'users_field_data.uid', $staff, 'NOT IN');
    }
  }
}

/**
 * Implements hook_views_pre_view().
 */
function connecdom_tweaks_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  if ($view->storage->id() == 'worklist') {
    $user = \Drupal::currentUser();

    // Remove Assignee field for Doctors
    if (in_array('doctor', $user->getRoles()) && !in_array('clinic', $user->getRoles())) {
      $view->removeHandler($display_id, 'field', 'field_study_assignee');
    }

    // Remove Clinic field for Clinics
    if (in_array('clinic', $user->getRoles()) && !in_array('doctor', $user->getRoles())) {
      $view->removeHandler($display_id, 'field', 'field_study_clinic');
    }
  }
}

/**
 * Implements template_preprocess_file_widget_multiple().
 */
function connecdom_tweaks_preprocess_file_widget_multiple(&$variables) {
  // Disable tabledrag for `field_attachments`.
  if ($variables['element']['#field_name'] == 'field_attachments') {
    unset($variables['table']['#tabledrag']);
    unset($variables['table']['#header'][1]);

    foreach ($variables['table']['#rows'] as &$row) {
      unset($row['data'][1]);
    }
  }
}

/**
 * Implements template_preprocess_field().
 */
function connecdom_tweaks_preprocess_field__user__field_access_token__user(&$variables) {
  $variables['user'] = \Drupal::request()->attributes->get('user');
}

/**
 * Implements hook_form_alter().
 */
function connecdom_tweaks_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'views_exposed_form':
      // Disable description in the autocomplete field.
      unset($form['uid']['#description']);
      break;

    case 'user_form':
      // Hide staff field.
      $form['field_clinic_staff']['#access'] = FALSE;

      // Set password field required.
      if ($token = \Drupal::request()->query->get('pass-reset-token')) {
        $form['account']['pass']['#required'] = TRUE;
      }

      // Set address field order.
      $form['field_locality']['widget'][0]['address']['#after_build'][] = '_connecdom_tweaks_address_field_widget';
      $form['field_address']['widget'][0]['address']['#after_build'][] = '_connecdom_tweaks_address_field_widget';

      // Custom submit handler for user_form.
      $form['actions']['submit']['#submit'][] = '_connecdom_tweaks_user_form_submit';

      // Conditional fields for Billing information.
      if (isset($form['field_billing_type'])) {
        $field_groups = [
          'pf' => [
            'field_billing_cpf',
          ],
          'pj' => [
            'field_billing_cnpj',
          ],
        ];

        foreach ($field_groups as $type => $fields) {
          foreach ($fields as $field) {
            $form[$field]['widget']['0']['value']['#states'] = [
              'visible' => [
                ':input[name="field_billing_type"]' => array('value' => strtoupper($type)),
              ],
              'required' => [
                ':input[name="field_billing_type"]' => array('value' => strtoupper($type)),
              ],
            ];
          }
        }
      }
      break;

    case 'node_study_additional_info_form':
      // Hide meta fields.
      $form['meta']['#access'] = FALSE;
      $form['revision_log']['#access'] = FALSE;
      $form['advanced']['#access'] = FALSE;

      // Load Study ID from URL.
      $sid = \Drupal::request()->query->get('sid');

      // Load Study from Resource ID.
      $study = ConnecdomTweaksController::entityLoadFromResourceId($sid, 'study');

      if ($study) {
        // Hide field field_report_study.
        $form['field_additional_info_study']['#access'] = FALSE;

        // Reference Study.
        $form['field_additional_info_study']['widget'][0]['target_id']['#default_value'] = $study;
      }
      break;

    case 'node_study_additional_info_edit_form':
      // Hide meta fields.
      $form['meta']['#access'] = FALSE;
      $form['revision_log']['#access'] = FALSE;
      $form['advanced']['#access'] = FALSE;
      $form['field_additional_info_study']['#access'] = FALSE;
      break;

    case 'node_report_form':
      // Hide meta fields.
      $form['meta']['#access'] = FALSE;

      // Hive text format help.
      $form['body']['widget']['#after_build'][] = '_connecdom_tweaks_remove_textarea_help';

      // Load Study ID from URL.
      $sid = \Drupal::request()->query->get('sid');

      // Load Study from Resource ID.
      $study = ConnecdomTweaksController::entityLoadFromResourceId($sid, 'study');

      // Check permission to add Report.
      if (ConnecdomTweaksController::reportHasAddPermission($study)) {
        if ($sid && $study) {
          // Hide field field_report_study.
          $form['field_report_study']['#access'] = FALSE;

          // Load current user.
          $user = \Drupal::currentUser();

          // Set default value for field_report_study.
          $form['field_report_study']['widget'][0]['target_id']['#default_value'] = $study;
        }
        else {
          drupal_set_message(t('Something went wrong. Please try again later or contact our support.'), 'error');
          $worklist_url = Url::fromRoute('view.worklist.main');
          $response = new RedirectResponse($worklist_url->toString());
          $response->send();
        }
      }
      else {
        throw new AccessDeniedHttpException();
      }
      break;

    case 'node_report_edit_form':
      // Hide meta fields.
      $form['meta']['#access'] = FALSE;

      // Hide revision_information group.
      $form['revision_information']['#access'] = FALSE;

      // Hide field field_report_study.
      $form['field_report_study']['#access'] = FALSE;

      // Hive text format help.
      $form['body']['widget']['#after_build'][] = '_connecdom_tweaks_remove_textarea_help';

      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function connecdom_tweaks_user_presave(EntityInterface $entity) {
  // Generate and store access tokens when a new Clinic is added.
  if ($entity->isNew() && in_array('clinic', $entity->getRoles()) && !$entity->field_access_token->value) {
    $orthanc_auth = new \Drupal\connecdom_orthanc_auth\ConnecdomOrthancAuth();
    $access_token = $orthanc_auth->generateAccessToken();
    $orthanc_auth->storeAccessToken($access_token, 2);

    // Save in profile's field.
    $entity->field_access_token->value = $access_token;
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function connecdom_tweaks_node_presave(EntityInterface $node) {
  // Only for content type Report.
  if ($node->bundle() == 'report') {
    // Load moderation state values.
    $state = $node->isPublished();
    $state_original = $node->original ? $node->original->isPublished() : NULL;

    // Load Study values.
    $study_id = $node->field_report_study->target_id;
    $study = \Drupal::entityTypeManager()->getStorage('study')->load($study_id);

    $mail_subject = null;

    // If node is about to be published.
    if (($state_original != $state) && $state) {
      // Update Study status to `done`.
      $mail_subject = t('A study has just finished');
      $study->field_study_status = 'done';
      $study->save();
    }

    // If node is new.
    if ($node->isNew()) {
      // Update Study status to `in_progress`.
      $study->field_study_status = 'in_progress';
      $study->save();
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function connecdom_tweaks_entity_update(EntityInterface $entity) {
  if ($entity->getEntityType()->id() == 'study') {
    // A Study is created.
    if ($entity->isNew()) {
      SendMail::send(
        'connecdom__study_notification__created', [
          'subject' => t('[CONNECDOM] New Study: %study', ['%study' => $entity->id()]),
          'recipient' => SendMail::clinicUserByStudy($entity),
          'entity' => $entity
        ]
      );
    }
    // It's an existing Study.
    else {
      // The status has changed.
      if ($entity->original->field_study_status->value != $entity->field_study_status->value) {
        // Switch over the current status to set the variables.
        switch ($entity->field_study_status->value) {
          case 'assigned':
            $template = 'connecdom__study_notification__assigned';
            $subject = t('[CONNECDOM] New assignment: %study', ['%study' => $entity->id()]);
            $recipient = $entity->field_study_assignee->entity;
            break;
          case 'unassigned':
            $template = 'connecdom__study_notification__unassigned';
            $subject = t('[CONNECDOM] Study unassignment: %study', ['%study' => $entity->id()]);
            $recipient = $entity->original->field_study_assignee->entity;
            break;
          case 'in_progress':
            $template = 'connecdom__study_notification__in_progress';
            $subject = t('[CONNECDOM] Report in progress: %study', ['%study' => $entity->id()]);
            $recipient = SendMail::clinicUserByStudy($entity);
            break;
          case 'done':
            $template = 'connecdom__study_notification__done';
            $subject = t('[CONNECDOM] Report is ready for download: %study', ['%study' => $entity->id()]);
            $recipient = SendMail::clinicUserByStudy($entity);
            break;
        }

        // Send the email.
        SendMail::send(
          $template, [
            'subject' => $subject,
            'recipient' => $recipient,
            'entity' => $entity
          ]
        );
      }
    }
  }
}

/**
 * Implements hook_entity_view_mode_alter().
 */
function connecdom_tweaks_entity_view_mode_alter(&$view_mode, EntityInterface $entity, $context) {
  if ($entity->getEntityTypeId() == 'user') {
    $roles = $entity->getRoles();

    if (in_array('clinic', $roles)) {
      $view_mode = 'clinic';
    }
    else if (in_array('doctor', $roles)) {
      $view_mode = 'doctor';
    }

  }
}

/**
 * Implements hook_mail().
 */
function connecdom_tweaks_mail($key, &$message, $params) {
  // Handle all custom emails.
  if (strpos($key, 'connecdom__') !== FALSE) {
    $message['from'] = \Drupal::config('system.site')->get('mail');
    $message['subject'] = $params['subject'];
    $body_params = [
      '#theme' => $key,
      '#data' => $params,
    ];
    $message['body'][] = \Drupal::service('renderer')->render($body_params);
  }
}

/**
 * Custom submit handler for user_form.
 */
function _connecdom_tweaks_user_form_submit(&$form, FormStateInterface $form_state) {
  // Get UID.
  $uid = $form_state->getValue('uid');

  // Redirect user to profile view.
  $form_state->setRedirect('entity.user.canonical', ['user' => $uid]);
}

/**
 * Custom #after_build for address field.
 */
function _connecdom_tweaks_address_field_widget($element, $form_state) {
  // Reorder fields.
  $element['administrative_area']['#weight'] = 0;
  $element['locality']['#weight'] = 1;
  $element['dependent_locality']['#weight'] = 2;

  // Show 'locality' based on 'administrative_area'.
  $element['locality']['#states'] = [
    'visible' => [
      ':input[name="field_locality[0][address][administrative_area]"]' => ['filled' => TRUE],
    ]
  ];

  return $element;
}

/**
 * Remove textarea help.
 */
function _connecdom_tweaks_remove_textarea_help($form_element, FormStateInterface $form_state) {
  if (isset($form_element[0]['format'])) {
    // All this stuff is needed to hide the help text.
    unset($form_element[0]['format']['guidelines']);
    unset($form_element[0]['format']['help']);
    unset($form_element[0]['format']['#type']);
    unset($form_element[0]['format']['#theme_wrappers']);
    $form_element[0]['format']['format']['#access'] = FALSE;
  }

  return $form_element;
}
